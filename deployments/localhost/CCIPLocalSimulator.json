{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CCIPLocalSimulator__MsgSenderIsNotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CCIPLocalSimulator__RequiredRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "configuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector_",
          "type": "uint64"
        },
        {
          "internalType": "contract IRouterClient",
          "name": "sourceRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IRouterClient",
          "name": "destinationRouter_",
          "type": "address"
        },
        {
          "internalType": "contract WETH9",
          "name": "wrappedNative_",
          "type": "address"
        },
        {
          "internalType": "contract LinkToken",
          "name": "linkToken_",
          "type": "address"
        },
        {
          "internalType": "contract BurnMintERC677Helper",
          "name": "ccipBnM_",
          "type": "address"
        },
        {
          "internalType": "contract BurnMintERC677Helper",
          "name": "ccipLnM_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "isChainSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestLinkFromFaucet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "supportNewTokenViaAccessControlDefaultAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "supportNewTokenViaGetCCIPAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "supportNewTokenViaOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x37ee1ddadef588420a06a759b48bbd73989e976718ce28d6167d1e9ae1e529ba",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "10676736",
    "logsBloom": "0x
    "blockHash": "0xec0af7d76f68df44e0f5f8024db45e8ca57a4d03f694f0636ddf7c4ea1325ee6",
    "transactionHash": "0x37ee1ddadef588420a06a759b48bbd73989e976718ce28d6167d1e9ae1e529ba",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x37ee1ddadef588420a06a759b48bbd73989e976718ce28d6167d1e9ae1e529ba",
        "address": "0xB7A5bd0345EF1Cc5E66bf61BdeC17D2461fBd968",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 0,
        "blockHash": "0xec0af7d76f68df44e0f5f8024db45e8ca57a4d03f694f0636ddf7c4ea1325ee6"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "10676736",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb339c15d18da5d2f76ff10f655fc901",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CCIPLocalSimulator__MsgSenderIsNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CCIPLocalSimulator__RequiredRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector_\",\"type\":\"uint64\"},{\"internalType\":\"contract IRouterClient\",\"name\":\"sourceRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IRouterClient\",\"name\":\"destinationRouter_\",\"type\":\"address\"},{\"internalType\":\"contract WETH9\",\"name\":\"wrappedNative_\",\"type\":\"address\"},{\"internalType\":\"contract LinkToken\",\"name\":\"linkToken_\",\"type\":\"address\"},{\"internalType\":\"contract BurnMintERC677Helper\",\"name\":\"ccipBnM_\",\"type\":\"address\"},{\"internalType\":\"contract BurnMintERC677Helper\",\"name\":\"ccipLnM_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestLinkFromFaucet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"supportNewTokenViaAccessControlDefaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"supportNewTokenViaGetCCIPAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"supportNewTokenViaOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract includes methods to manage supported tokens and configurations for local simulations.\",\"kind\":\"dev\",\"methods\":{\"configuration()\":{\"returns\":{\"ccipBnM_\":\"- The ccipBnM token.\",\"ccipLnM_\":\"- The ccipLnM token.\",\"chainSelector_\":\"- The unique CCIP Chain Selector.\",\"destinationRouter_\":\"- The destination chain Router contract.\",\"linkToken_\":\"- The LINK token.\",\"sourceRouter_\":\" - The source chain Router contract.\",\"wrappedNative_\":\"- The wrapped native token which can be used for CCIP fees.\"}},\"getSupportedTokens(uint64)\":{\"params\":{\"chainSelector\":\"- The unique CCIP Chain Selector.\"},\"returns\":{\"tokens\":\"- Returns a list of token addresses that are supported for cross-chain transfers by the simulator.\"}},\"isChainSupported(uint64)\":{\"params\":{\"chainSelector\":\"- The unique CCIP Chain Selector.\"},\"returns\":{\"supported\":\"- Returns true if `chainSelector` is supported by the simulator.\"}},\"requestLinkFromFaucet(address,uint256)\":{\"params\":{\"amount\":\"- The amount of LINK tokens to send.\",\"to\":\"- The address to which LINK tokens are to be sent.\"},\"returns\":{\"success\":\"- Returns `true` if the transfer of tokens was successful, otherwise `false`.\"}},\"supportNewTokenViaAccessControlDefaultAdmin(address)\":{\"params\":{\"tokenAddress\":\"- The address of the token to add to the list of supported tokens.\"}},\"supportNewTokenViaGetCCIPAdmin(address)\":{\"params\":{\"tokenAddress\":\"- The address of the token to add to the list of supported tokens.\"}},\"supportNewTokenViaOwner(address)\":{\"params\":{\"tokenAddress\":\"- The address of the token to add to the list of supported tokens.\"}}},\"title\":\"CCIPLocalSimulator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configuration()\":{\"notice\":\"Returns configuration details for pre-deployed contracts and services needed for local CCIP simulations.\"},\"constructor\":{\"notice\":\"Constructor to initialize the contract and pre-deployed token instances\"},\"getSupportedTokens(uint64)\":{\"notice\":\"Gets a list of token addresses that are supported for cross-chain transfers by the simulator.\"},\"isChainSupported(uint64)\":{\"notice\":\"Checks whether the provided `chainSelector` is supported by the simulator.\"},\"requestLinkFromFaucet(address,uint256)\":{\"notice\":\"Requests LINK tokens from the faucet. The provided amount of tokens are transferred to provided destination address.\"},\"supportNewTokenViaAccessControlDefaultAdmin(address)\":{\"notice\":\"Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         The caller must have the DEFAULT_ADMIN_ROLE as defined by the contract itself.         Reverts if the caller is not the admin of the token using OZ's AccessControl DEFAULT_ADMIN_ROLE.\"},\"supportNewTokenViaGetCCIPAdmin(address)\":{\"notice\":\"Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         Reverts if token does not implement getCCIPAdmin() function.         Reverts if the caller is not the token CCIPAdmin.\"},\"supportNewTokenViaOwner(address)\":{\"notice\":\"Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         Reverts if token does not implement owner() function.         Reverts if the caller is not the token owner.\"}},\"notice\":\"This contract simulates local CCIP (Cross-Chain Interoperability Protocol) operations for testing and development purposes.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CCIPLocalSimulator.sol\":\"CCIPLocalSimulator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/contracts/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from  the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message. If this reverts, any token transfers also revert.\\n  /// The message will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message.\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter.\\n  function ccipReceive(\\n    Client.Any2EVMMessage calldata message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x8f67554db88baee2d8facee3320fb85fd566f843b9e4bdb6870eafe1637d7919\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/interfaces/IGetCCIPAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGetCCIPAdmin {\\n  /// @notice Returns the admin of the token.\\n  /// @dev This method is named to never conflict with existing methods.\\n  function getCCIPAdmin() external view returns (address);\\n}\\n\",\"keccak256\":\"0x915794040125fbb75110b20e60c3e6b584d92f57d40b77266bc37d31dae3bd29\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/interfaces/IOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwner {\\n  /// @notice Returns the owner of the contract.\\n  /// @dev This method is named to match with the OpenZeppelin Ownable contract.\\n  function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x53acc313bc9fd39590c1a0a770bd311c85d803741d361319393c6bcfff5ed2a6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouter {\\n  error OnlyOffRamp();\\n\\n  /// @notice Route the message to its intended receiver contract.\\n  /// @param message Client.Any2EVMMessage struct.\\n  /// @param gasForCallExactCheck of params for exec.\\n  /// @param gasLimit set of params for exec.\\n  /// @param receiver set of params for exec.\\n  /// @dev if the receiver is a contracts that signals support for CCIP execution through EIP-165.\\n  /// the contract is called. If not, only tokens are transferred.\\n  /// @return success A boolean value indicating whether the ccip message was received without errors.\\n  /// @return retBytes A bytes array containing return data form CCIP receiver.\\n  /// @return gasUsed the gas used by the external customer call. Does not include any overhead.\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retBytes, uint256 gasUsed);\\n\\n  /// @notice Returns the configured onramp for a specific destination chain.\\n  /// @param destChainSelector The destination chain Id to get the onRamp for.\\n  /// @return onRampAddress The address of the onRamp.\\n  function getOnRamp(\\n    uint64 destChainSelector\\n  ) external view returns (address onRampAddress);\\n\\n  /// @notice Return true if the given offRamp is a configured offRamp for the given source chain.\\n  /// @param sourceChainSelector The source chain selector to check.\\n  /// @param offRamp The address of the offRamp to check.\\n  function isOffRamp(uint64 sourceChainSelector, address offRamp) external view returns (bool isOffRamp);\\n}\\n\",\"keccak256\":\"0x0851f656ca61b923f81945ee9da5bdce7ea7ccef77687abab6b884f1538a2fd5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(\\n    uint64 destChainSelector\\n  ) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector.\\n  /// @param message The cross-chain CCIP message including data and/or tokens.\\n  /// @return fee returns execution fee for the message.\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain.\\n  /// @param destinationChainSelector The destination chain ID.\\n  /// @param message The cross-chain CCIP message including data and/or tokens.\\n  /// @return messageId The message ID.\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept.\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x21280104a988eb7022f8968b1672bafba80a74e59f5512415009dff9a37be46a\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains.\\n    bytes data; // Data payload.\\n    EVMTokenAmount[] tokenAmounts; // Token transfers.\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2).\\n  }\\n\\n  // Tag to indicate only a gas limit. Only usable for EVM as destination chain.\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // Tag to indicate a gas limit (or dest chain equivalent processing units) and Out Of Order Execution. This tag is\\n  // available for multiple chain families. If there is no chain family specific tag, this is the default available\\n  // for a chain.\\n  // Note: not available for Solana VM based chains.\\n  bytes4 public constant GENERIC_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to\\n  /// other messages from the same sender. This value's default varies by chain. On some chains, a particular value is\\n  /// enforced, meaning if the expected value is not set, the message request will revert.\\n  /// @dev Fully compatible with the previously existing EVMExtraArgsV2.\\n  struct GenericExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  // Extra args tag for chains that use the Solana VM.\\n  bytes4 public constant SVM_EXTRA_ARGS_V1_TAG = 0x1f3b3aba;\\n\\n  struct SVMExtraArgsV1 {\\n    uint32 computeUnits;\\n    uint64 accountIsWritableBitmap;\\n    bool allowOutOfOrderExecution;\\n    bytes32 tokenReceiver;\\n    // Additional accounts needed for execution of CCIP receiver. Must be empty if message.receiver is zero.\\n    // Token transfer related accounts are specified in the token pool lookup table on SVM.\\n    bytes32[] accounts;\\n  }\\n\\n  /// @dev The maximum number of accounts that can be passed in SVMExtraArgs.\\n  uint256 public constant SVM_EXTRA_ARGS_MAX_ACCOUNTS = 64;\\n\\n  /// @dev The expected static payload size of a token transfer when Borsh encoded and submitted to SVM.\\n  /// TokenPool extra data and offchain data sizes are dynamic, and should be accounted for separately.\\n  uint256 public constant SVM_TOKEN_TRANSFER_DATA_OVERHEAD = (4 + 32) // source_pool\\n    + 32 // token_address\\n    + 4 // gas_amount\\n    + 4 // extra_data overhead\\n    + 32 // amount\\n    + 32 // size of the token lookup table account\\n    + 32 // token-related accounts in the lookup table, over-estimated to 32, typically between 11 - 13\\n    + 32 // token account belonging to the token receiver, e.g ATA, not included in the token lookup table\\n    + 32 // per-chain token pool config, not included in the token lookup table\\n    + 32 // per-chain token billing config, not always included in the token lookup table\\n    + 32; // OffRamp pool signer PDA, not included in the token lookup table\\n\\n  /// @dev Number of overhead accounts needed for message execution on SVM.\\n  /// @dev These are message.receiver, and the OffRamp Signer PDA specific to the receiver.\\n  uint256 public constant SVM_MESSAGING_ACCOUNTS_OVERHEAD = 2;\\n\\n  /// @dev The size of each SVM account address in bytes.\\n  uint256 public constant SVM_ACCOUNT_BYTE_SIZE = 32;\\n\\n  function _argsToBytes(\\n    GenericExtraArgsV2 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(GENERIC_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n\\n  function _svmArgsToBytes(\\n    SVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(SVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x7c736e12ebb1d0e3a0c99436eacfac14d16ec941843050c9a7d82a6bff5b35a1\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/libraries/Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {MerkleMultiProof} from \\\"../libraries/MerkleMultiProof.sol\\\";\\n\\n/// @notice Library for CCIP internal definitions common to multiple contracts.\\n/// @dev The following is a non-exhaustive list of \\\"known issues\\\" for CCIP:\\n/// - We could implement yield claiming for Blast. This is not worth the custom code path on non-blast chains.\\n/// - uint32 is used for timestamps, which will overflow in 2106. This is not a concern for the current use case, as we\\n/// expect to have migrated to a new version by then.\\nlibrary Internal {\\n  error InvalidEVMAddress(bytes encodedAddress);\\n  error Invalid32ByteAddress(bytes encodedAddress);\\n\\n  /// @dev We limit return data to a selector plus 4 words. This is to avoid malicious contracts from returning\\n  /// large amounts of data and causing repeated out-of-gas scenarios.\\n  uint16 internal constant MAX_RET_BYTES = 4 + 4 * 32;\\n  /// @dev The expected number of bytes returned by the balanceOf function.\\n  uint256 internal constant MAX_BALANCE_OF_RET_BYTES = 32;\\n\\n  /// @dev The address used to send calls for gas estimation.\\n  /// You only need to use this address if the minimum gas limit specified by the user is not actually enough to execute the\\n  /// given message and you're attempting to estimate the actual necessary gas limit\\n  address public constant GAS_ESTIMATION_SENDER = address(0xC11C11C11C11C11C11C11C11C11C11C11C11C1);\\n\\n  /// @notice A collection of token price and gas price updates.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct PriceUpdates {\\n    TokenPriceUpdate[] tokenPriceUpdates;\\n    GasPriceUpdate[] gasPriceUpdates;\\n  }\\n\\n  /// @notice Token price in USD.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct TokenPriceUpdate {\\n    address sourceToken; // Source token.\\n    uint224 usdPerToken; // 1e18 USD per 1e18 of the smallest token denomination.\\n  }\\n\\n  /// @notice Gas price for a given chain in USD, its value may contain tightly packed fields.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct GasPriceUpdate {\\n    uint64 destChainSelector; // Destination chain selector.\\n    uint224 usdPerUnitGas; // 1e18 USD per smallest unit (e.g. wei) of destination chain gas.\\n  }\\n\\n  /// @notice A timestamped uint224 value that can contain several tightly packed fields.\\n  struct TimestampedPackedUint224 {\\n    uint224 value; // \\u2500\\u2500\\u2500\\u2500\\u256e Value in uint224, packed.\\n    uint32 timestamp; // \\u2500\\u256f Timestamp of the most recent price update.\\n  }\\n\\n  /// @dev Gas price is stored in 112-bit unsigned int. uint224 can pack 2 prices.\\n  /// When packing L1 and L2 gas prices, L1 gas price is left-shifted to the higher-order bits.\\n  /// Using uint8 type, which cannot be higher than other bit shift operands, to avoid shift operand type warning.\\n  uint8 public constant GAS_PRICE_BITS = 112;\\n\\n  struct SourceTokenData {\\n    // The source pool address, abi encoded. This value is trusted as it was obtained through the onRamp. It can be\\n    // relied upon by the destination pool to validate the source pool.\\n    bytes sourcePoolAddress;\\n    // The address of the destination token, abi encoded in the case of EVM chains.\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint32 destGasAmount; // The amount of gas available for the releaseOrMint and balanceOf calls on the offRamp\\n  }\\n\\n  /// @notice Report that is submitted by the execution DON at the execution phase, including chain selector data.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct ExecutionReport {\\n    uint64 sourceChainSelector; // Source chain selector for which the report is submitted.\\n    Any2EVMRampMessage[] messages;\\n    // Contains a bytes array for each message, each inner bytes array contains bytes per transferred token.\\n    bytes[][] offchainTokenData;\\n    bytes32[] proofs;\\n    uint256 proofFlagBits;\\n  }\\n\\n  /// @dev Any2EVMRampMessage struct has 10 fields, including 3 variable unnested arrays, sender, data and tokenAmounts.\\n  /// Each variable array takes 1 more slot to store its length.\\n  /// When abi encoded, excluding array contents, Any2EVMMessage takes up a fixed number of 13 slots, 32 bytes each.\\n  /// Assume 1 slot for sender\\n  /// For structs that contain arrays, 1 more slot is added to the front, reaching a total of 14.\\n  /// The fixed bytes does not cover struct data (this is represented by MESSAGE_FIXED_BYTES_PER_TOKEN)\\n  uint256 public constant MESSAGE_FIXED_BYTES = 32 * 15;\\n\\n  /// @dev Any2EVMTokensTransfer struct bytes length\\n  /// 0x20\\n  /// sourcePoolAddress_offset\\n  /// destTokenAddress\\n  /// destGasAmount\\n  /// extraData_offset\\n  /// amount\\n  /// sourcePoolAddress_length\\n  /// sourcePoolAddress_content // assume 1 slot\\n  /// extraData_length // contents billed separately\\n  uint256 public constant MESSAGE_FIXED_BYTES_PER_TOKEN = 32 * (4 + (3 + 2));\\n\\n  bytes32 internal constant ANY_2_EVM_MESSAGE_HASH = keccak256(\\\"Any2EVMMessageHashV1\\\");\\n  bytes32 internal constant EVM_2_ANY_MESSAGE_HASH = keccak256(\\\"EVM2AnyMessageHashV1\\\");\\n\\n  /// @dev Used to hash messages for multi-lane family-agnostic OffRamps.\\n  /// OnRamp hash(EVM2AnyMessage) != Any2EVMRampMessage.messageId.\\n  /// OnRamp hash(EVM2AnyMessage) != OffRamp hash(Any2EVMRampMessage).\\n  /// @param original OffRamp message to hash.\\n  /// @param metadataHash Hash preimage to ensure global uniqueness.\\n  /// @return hashedMessage hashed message as a keccak256.\\n  function _hash(Any2EVMRampMessage memory original, bytes32 metadataHash) internal pure returns (bytes32) {\\n    // Fixed-size message fields are included in nested hash to reduce stack pressure.\\n    // This hashing scheme is also used by RMN. If changing it, please notify the RMN maintainers.\\n    return keccak256(\\n      abi.encode(\\n        MerkleMultiProof.LEAF_DOMAIN_SEPARATOR,\\n        metadataHash,\\n        keccak256(\\n          abi.encode(\\n            original.header.messageId,\\n            original.receiver,\\n            original.header.sequenceNumber,\\n            original.gasLimit,\\n            original.header.nonce\\n          )\\n        ),\\n        keccak256(original.sender),\\n        keccak256(original.data),\\n        keccak256(abi.encode(original.tokenAmounts))\\n      )\\n    );\\n  }\\n\\n  function _hash(EVM2AnyRampMessage memory original, bytes32 metadataHash) internal pure returns (bytes32) {\\n    // Fixed-size message fields are included in nested hash to reduce stack pressure.\\n    // This hashing scheme is also used by RMN. If changing it, please notify the RMN maintainers.\\n    return keccak256(\\n      abi.encode(\\n        MerkleMultiProof.LEAF_DOMAIN_SEPARATOR,\\n        metadataHash,\\n        keccak256(\\n          abi.encode(\\n            original.sender,\\n            original.header.sequenceNumber,\\n            original.header.nonce,\\n            original.feeToken,\\n            original.feeTokenAmount\\n          )\\n        ),\\n        keccak256(original.receiver),\\n        keccak256(original.data),\\n        keccak256(abi.encode(original.tokenAmounts)),\\n        keccak256(original.extraArgs)\\n      )\\n    );\\n  }\\n\\n  /// @dev We disallow the first 1024 addresses to avoid calling into a range known for hosting precompiles. Calling\\n  /// into precompiles probably won't cause any issues, but to be safe we can disallow this range. It is extremely\\n  /// unlikely that anyone would ever be able to generate an address in this range. There is no official range of\\n  /// precompiles, but EIP-7587 proposes to reserve the range 0x100 to 0x1ff. Our range is more conservative, even\\n  /// though it might not be exhaustive for all chains, which is OK. We also disallow the zero address, which is a\\n  /// common practice.\\n  uint256 public constant EVM_PRECOMPILE_SPACE = 1024;\\n\\n  // According to the Aptos docs, the first 0xa addresses are reserved for precompiles.\\n  // https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/doc/account.md#function-create_framework_reserved_account-1\\n  uint256 public constant APTOS_PRECOMPILE_SPACE = 0x0b;\\n\\n  /// @notice This methods provides validation for parsing abi encoded addresses by ensuring the address is within the\\n  /// EVM address space. If it isn't it will revert with an InvalidEVMAddress error, which we can catch and handle\\n  /// more gracefully than a revert from abi.decode.\\n  function _validateEVMAddress(\\n    bytes memory encodedAddress\\n  ) internal pure {\\n    if (encodedAddress.length != 32) revert InvalidEVMAddress(encodedAddress);\\n    uint256 encodedAddressUint = abi.decode(encodedAddress, (uint256));\\n    if (encodedAddressUint > type(uint160).max || encodedAddressUint < EVM_PRECOMPILE_SPACE) {\\n      revert InvalidEVMAddress(encodedAddress);\\n    }\\n  }\\n\\n  /// @notice This methods provides validation for parsing abi encoded addresses by ensuring the address is within the\\n  /// bounds of [minValue, uint256.max]. If it isn't it will revert with an Invalid32ByteAddress error.\\n  function _validate32ByteAddress(bytes memory encodedAddress, uint256 minValue) internal pure {\\n    if (encodedAddress.length != 32) revert Invalid32ByteAddress(encodedAddress);\\n    if (minValue > 0) {\\n      if (abi.decode(encodedAddress, (uint256)) < minValue) {\\n        revert Invalid32ByteAddress(encodedAddress);\\n      }\\n    }\\n  }\\n\\n  /// @notice Enum listing the possible message execution states within the offRamp contract.\\n  /// UNTOUCHED never executed.\\n  /// IN_PROGRESS currently being executed, used a replay protection.\\n  /// SUCCESS successfully executed. End state.\\n  /// FAILURE unsuccessfully executed, manual execution is now enabled.\\n  /// @dev RMN depends on this enum, if changing, please notify the RMN maintainers.\\n  enum MessageExecutionState {\\n    UNTOUCHED,\\n    IN_PROGRESS,\\n    SUCCESS,\\n    FAILURE\\n  }\\n\\n  /// @notice CCIP OCR plugin type, used to separate execution & commit transmissions and configs.\\n  enum OCRPluginType {\\n    Commit,\\n    Execution\\n  }\\n\\n  /// @notice Family-agnostic header for OnRamp & OffRamp messages.\\n  /// The messageId is not expected to match hash(message), since it may originate from another ramp family.\\n  struct RampMessageHeader {\\n    bytes32 messageId; // Unique identifier for the message, generated with the source chain's encoding scheme (i.e. not necessarily abi.encoded).\\n    uint64 sourceChainSelector; // \\u2500\\u256e the chain selector of the source chain, note: not chainId.\\n    uint64 destChainSelector; //    \\u2502 the chain selector of the destination chain, note: not chainId.\\n    uint64 sequenceNumber; //       \\u2502 sequence number, not unique across lanes.\\n    uint64 nonce; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f nonce for this lane for this sender, not unique across senders/lanes.\\n  }\\n\\n  struct EVM2AnyTokenTransfer {\\n    // The source pool EVM address. This value is trusted as it was obtained through the onRamp. It can be relied\\n    // upon by the destination pool to validate the source pool.\\n    address sourcePoolAddress;\\n    // The EVM address of the destination token.\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint256 amount; // Amount of tokens.\\n    // Destination chain data used to execute the token transfer on the destination chain. For an EVM destination, it\\n    // consists of the amount of gas available for the releaseOrMint and transfer calls made by the offRamp.\\n    bytes destExecData;\\n  }\\n\\n  struct Any2EVMTokenTransfer {\\n    // The source pool EVM address encoded to bytes. This value is trusted as it is obtained through the onRamp. It can\\n    // be relied upon by the destination pool to validate the source pool.\\n    bytes sourcePoolAddress;\\n    address destTokenAddress; // \\u2500\\u256e Address of destination token\\n    uint32 destGasAmount; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u256f The amount of gas available for the releaseOrMint and transfer calls on the offRamp.\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  /// @notice Family-agnostic message routed to an OffRamp.\\n  /// Note: hash(Any2EVMRampMessage) != hash(EVM2AnyRampMessage), hash(Any2EVMRampMessage) != messageId due to encoding\\n  /// and parameter differences.\\n  struct Any2EVMRampMessage {\\n    RampMessageHeader header; // Message header.\\n    bytes sender; // sender address on the source chain.\\n    bytes data; // arbitrary data payload supplied by the message sender.\\n    address receiver; // receiver address on the destination chain.\\n    uint256 gasLimit; // user supplied maximum gas amount available for dest chain execution.\\n    Any2EVMTokenTransfer[] tokenAmounts; // array of tokens and amounts to transfer.\\n  }\\n\\n  /// @notice Family-agnostic message emitted from the OnRamp.\\n  /// Note: hash(Any2EVMRampMessage) != hash(EVM2AnyRampMessage) due to encoding & parameter differences.\\n  /// messageId = hash(EVM2AnyRampMessage) using the source EVM chain's encoding format.\\n  struct EVM2AnyRampMessage {\\n    RampMessageHeader header; // Message header.\\n    address sender; // sender address on the source chain.\\n    bytes data; // arbitrary data payload supplied by the message sender.\\n    bytes receiver; // receiver address on the destination chain.\\n    bytes extraArgs; // destination-chain specific extra args, such as the gasLimit for EVM chains.\\n    address feeToken; // fee token.\\n    uint256 feeTokenAmount; // fee token amount.\\n    uint256 feeValueJuels; // fee amount in Juels.\\n    EVM2AnyTokenTransfer[] tokenAmounts; // array of tokens and amounts to transfer.\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP ChainFamilySelector EVM\\\"));\\n  bytes4 public constant CHAIN_FAMILY_SELECTOR_EVM = 0x2812d52c;\\n\\n  // bytes4(keccak256(\\\"CCIP ChainFamilySelector SVM\\\"));\\n  bytes4 public constant CHAIN_FAMILY_SELECTOR_SVM = 0x1e10bdc4;\\n\\n  // bytes4(keccak256(\\\"CCIP ChainFamilySelector APTOS\\\"));\\n  bytes4 public constant CHAIN_FAMILY_SELECTOR_APTOS = 0xac77ffec;\\n\\n  // bytes4(keccak256(\\\"CCIP ChainFamilySelector SUI\\\"));\\n  bytes4 public constant CHAIN_FAMILY_SELECTOR_SUI = 0xc4e05953;\\n\\n  /// @dev Holds a merkle root and interval for a source chain so that an array of these can be passed in the CommitReport.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  /// @dev inefficient struct packing intentionally chosen to maintain order of specificity. Not a storage struct so impact is minimal.\\n  // solhint-disable-next-line gas-struct-packing\\n  struct MerkleRoot {\\n    uint64 sourceChainSelector; // Remote source chain selector that the Merkle Root is scoped to\\n    bytes onRampAddress; //        Generic onRamp address, to support arbitrary sources; for EVM, use abi.encode\\n    uint64 minSeqNr; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256e Minimum sequence number, inclusive\\n    uint64 maxSeqNr; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Maximum sequence number, inclusive\\n    bytes32 merkleRoot; //         Merkle root covering the interval & source chain messages\\n  }\\n}\\n\",\"keccak256\":\"0xe99a73005ac9a6290f27708f6b053e4dad8b2df0b17332cf4e6db66c4fa71cd5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/contracts/libraries/MerkleMultiProof.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary MerkleMultiProof {\\n  /// @notice Leaf domain separator, should be used as the first 32 bytes of a leaf's preimage.\\n  bytes32 internal constant LEAF_DOMAIN_SEPARATOR = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n  /// @notice Internal domain separator, should be used as the first 32 bytes of an internal node's preimage.\\n  bytes32 internal constant INTERNAL_DOMAIN_SEPARATOR =\\n    0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n  uint256 internal constant MAX_NUM_HASHES = 256;\\n\\n  error InvalidProof();\\n  error LeavesCannotBeEmpty();\\n\\n  /// @notice Computes the root based on provided pre-hashed leaf nodes in leaves, internal nodes  in proofs, and using\\n  /// proofFlagBits' i-th bit to determine if an element of proofs or one of the previously computed leafs or internal\\n  /// nodes will be used for the i-th hash.\\n  /// @param leaves Should be pre-hashed and the first 32 bytes of a leaf's preimage should match LEAF_DOMAIN_SEPARATOR.\\n  /// @param proofs Hashes to be used instead of a leaf hash when the proofFlagBits indicates a proof should be used.\\n  /// @param proofFlagBits A single uint256 of which each bit indicates whether a leaf or a proof needs to be used in\\n  /// a hash operation.\\n  /// @dev the maximum number of hash operations it set to 256. Any input that would require more than 256 hashes to get\\n  /// to a root will revert.\\n  /// @dev For given input `leaves` = [a,b,c] `proofs` = [D] and `proofFlagBits` = 5\\n  ///     totalHashes = 3 + 1 - 1 = 3\\n  ///  ** round 1 **\\n  ///    proofFlagBits = (5 >> 0) & 1 = true\\n  ///    hashes[0] = hashPair(a, b)\\n  ///    (leafPos, hashPos, proofPos) = (2, 0, 0);\\n  ///\\n  ///  ** round 2 **\\n  ///    proofFlagBits = (5 >> 1) & 1 = false\\n  ///    hashes[1] = hashPair(D, c)\\n  ///    (leafPos, hashPos, proofPos) = (3, 0, 1);\\n  ///\\n  ///  ** round 3 **\\n  ///    proofFlagBits = (5 >> 2) & 1 = true\\n  ///    hashes[2] = hashPair(hashes[0], hashes[1])\\n  ///    (leafPos, hashPos, proofPos) = (3, 2, 1);\\n  ///\\n  ///    i = 3 and no longer < totalHashes. The algorithm is done\\n  ///    return hashes[totalHashes - 1] = hashes[2]; the last hash we computed.\\n  // We mark this function as internal to force it to be inlined in contracts that use it, but semantically it is public.\\n  function _merkleRoot(\\n    bytes32[] memory leaves,\\n    bytes32[] memory proofs,\\n    uint256 proofFlagBits\\n  ) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 leavesLen = leaves.length;\\n      uint256 proofsLen = proofs.length;\\n      if (leavesLen == 0) revert LeavesCannotBeEmpty();\\n      if (!(leavesLen <= MAX_NUM_HASHES + 1 && proofsLen <= MAX_NUM_HASHES + 1)) revert InvalidProof();\\n      uint256 totalHashes = leavesLen + proofsLen - 1;\\n      if (!(totalHashes <= MAX_NUM_HASHES)) revert InvalidProof();\\n      if (totalHashes == 0) {\\n        return leaves[0];\\n      }\\n      bytes32[] memory hashes = new bytes32[](totalHashes);\\n      (uint256 leafPos, uint256 hashPos, uint256 proofPos) = (0, 0, 0);\\n\\n      for (uint256 i = 0; i < totalHashes; ++i) {\\n        // Checks if the bit flag signals the use of a supplied proof or a leaf/previous hash.\\n        bytes32 a;\\n        if (proofFlagBits & (1 << i) == (1 << i)) {\\n          // Use a leaf or a previously computed hash.\\n          if (leafPos < leavesLen) {\\n            a = leaves[leafPos++];\\n          } else {\\n            a = hashes[hashPos++];\\n          }\\n        } else {\\n          // Use a supplied proof.\\n          a = proofs[proofPos++];\\n        }\\n\\n        // The second part of the hashed pair is never a proof as hashing two proofs would result in a\\n        // hash that can already be computed offchain.\\n        bytes32 b;\\n        if (leafPos < leavesLen) {\\n          b = leaves[leafPos++];\\n        } else {\\n          b = hashes[hashPos++];\\n        }\\n\\n        if (!(hashPos <= i)) revert InvalidProof();\\n\\n        hashes[i] = _hashPair(a, b);\\n      }\\n      if (!(hashPos == totalHashes - 1 && leafPos == leavesLen && proofPos == proofsLen)) revert InvalidProof();\\n      // Return the last hash.\\n      return hashes[totalHashes - 1];\\n    }\\n  }\\n\\n  /// @notice Hashes two bytes32 objects in their given order, prepended by the INTERNAL_DOMAIN_SEPARATOR.\\n  function _hashInternalNode(bytes32 left, bytes32 right) private pure returns (bytes32 hash) {\\n    return keccak256(abi.encode(INTERNAL_DOMAIN_SEPARATOR, left, right));\\n  }\\n\\n  /// @notice Hashes two bytes32 objects. The order is taken into account, using the lower value first.\\n  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n    return a < b ? _hashInternalNode(a, b) : _hashInternalNode(b, a);\\n  }\\n}\\n\",\"keccak256\":\"0x8f4f8bf360b41ccc76dfbe68a2b410df168f9e05b1635d987e2bd09040ec2890\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/contracts/test/mocks/MockRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../../interfaces/IAny2EVMMessageReceiver.sol\\\";\\nimport {IRouter} from \\\"../../interfaces/IRouter.sol\\\";\\nimport {IRouterClient} from \\\"../../interfaces/IRouterClient.sol\\\";\\n\\nimport {Client} from \\\"../../libraries/Client.sol\\\";\\nimport {Internal} from \\\"../../libraries/Internal.sol\\\";\\nimport {CallWithExactGas} from \\\"@chainlink/contracts/src/v0.8/shared/call/CallWithExactGas.sol\\\";\\n\\nimport {IERC20} from\\n  \\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from\\n  \\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC165Checker} from\\n  \\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract MockCCIPRouter is IRouter, IRouterClient {\\n  using SafeERC20 for IERC20;\\n  using ERC165Checker for address;\\n\\n  error InvalidAddress(bytes encodedAddress);\\n  error InvalidExtraArgsTag();\\n  error ReceiverError(bytes err);\\n\\n  event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash);\\n  event MsgExecuted(bool success, bytes retData, uint256 gasUsed);\\n\\n  uint16 public constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n  uint32 public constant DEFAULT_GAS_LIMIT = 200_000;\\n\\n  uint256 internal s_mockFeeTokenAmount; //use setFee() to change to non-zero to test fees\\n\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    return _routeMessage(message, gasForCallExactCheck, gasLimit, receiver);\\n  }\\n\\n  function _routeMessage(\\n    Client.Any2EVMMessage memory message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) internal returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    // There are three cases in which we skip calling the receiver:\\n    // 1. If the message data is empty AND the gas limit is 0.\\n    //          This indicates a message that only transfers tokens. It is valid to only send tokens to a contract\\n    //          that supports the IAny2EVMMessageReceiver interface, but without this first check we would call the\\n    //          receiver without any gas, which would revert the transaction.\\n    // 2. If the receiver is not a contract.\\n    // 3. If the receiver is a contract but it does not support the IAny2EVMMessageReceiver interface.\\n    //\\n    // The ordering of these checks is important, as the first check is the cheapest to execute.\\n    if (\\n      (message.data.length == 0 && gasLimit == 0) || receiver.code.length == 0\\n        || !receiver.supportsInterface(type(IAny2EVMMessageReceiver).interfaceId)\\n    ) {\\n      return (true, \\\"\\\", 0);\\n    }\\n\\n    bytes memory data = abi.encodeWithSelector(IAny2EVMMessageReceiver.ccipReceive.selector, message);\\n\\n    (success, retData, gasUsed) = CallWithExactGas._callWithExactGasSafeReturnData(\\n      data, receiver, gasLimit, gasForCallExactCheck, Internal.MAX_RET_BYTES\\n    );\\n\\n    // Event to assist testing, does not exist on real deployments\\n    emit MsgExecuted(success, retData, gasUsed);\\n\\n    // Real router event\\n    emit MessageExecuted(message.messageId, message.sourceChainSelector, msg.sender, keccak256(data));\\n    return (success, retData, gasUsed);\\n  }\\n\\n  /// @notice Sends the tx locally to the receiver instead of on the destination chain.\\n  /// @dev Ignores destinationChainSelector\\n  /// @dev Returns a mock message ID, which is not calculated from the message contents in the\\n  /// same way as the real message ID.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32) {\\n    if (message.receiver.length != 32) revert InvalidAddress(message.receiver);\\n    uint256 decodedReceiver = abi.decode(message.receiver, (uint256));\\n    // We want to disallow sending to address(0) and to precompiles, which exist on address(1) through address(9).\\n    if (decodedReceiver > type(uint160).max || decodedReceiver < 10) revert InvalidAddress(message.receiver);\\n\\n    uint256 feeTokenAmount = getFee(destinationChainSelector, message);\\n    if (message.feeToken == address(0)) {\\n      if (msg.value < feeTokenAmount) revert InsufficientFeeTokenAmount();\\n    } else {\\n      if (msg.value > 0) revert InvalidMsgValue();\\n      IERC20(message.feeToken).safeTransferFrom(msg.sender, address(this), feeTokenAmount);\\n    }\\n\\n    address receiver = address(uint160(decodedReceiver));\\n    uint256 gasLimit = _fromBytes(message.extraArgs).gasLimit;\\n    bytes32 mockMsgId = keccak256(abi.encode(message));\\n\\n    Client.Any2EVMMessage memory executableMsg = Client.Any2EVMMessage({\\n      messageId: mockMsgId,\\n      sourceChainSelector: 16015286601757825753, // Sepolia\\n      sender: abi.encode(msg.sender),\\n      data: message.data,\\n      destTokenAmounts: message.tokenAmounts\\n    });\\n\\n    for (uint256 i = 0; i < message.tokenAmounts.length; ++i) {\\n      IERC20(message.tokenAmounts[i].token).safeTransferFrom(msg.sender, receiver, message.tokenAmounts[i].amount);\\n    }\\n\\n    (bool success, bytes memory retData,) = _routeMessage(executableMsg, GAS_FOR_CALL_EXACT_CHECK, gasLimit, receiver);\\n\\n    if (!success) revert ReceiverError(retData);\\n\\n    return mockMsgId;\\n  }\\n\\n  function _fromBytes(\\n    bytes calldata extraArgs\\n  ) internal pure returns (Client.GenericExtraArgsV2 memory) {\\n    if (extraArgs.length == 0) {\\n      return Client.GenericExtraArgsV2({gasLimit: DEFAULT_GAS_LIMIT, allowOutOfOrderExecution: false});\\n    }\\n\\n    bytes4 extraArgsTag = bytes4(extraArgs);\\n    if (extraArgsTag == Client.GENERIC_EXTRA_ARGS_V2_TAG) {\\n      return abi.decode(extraArgs[4:], (Client.GenericExtraArgsV2));\\n    } else if (extraArgsTag == Client.EVM_EXTRA_ARGS_V1_TAG) {\\n      return\\n        Client.GenericExtraArgsV2({gasLimit: abi.decode(extraArgs[4:], (uint256)), allowOutOfOrderExecution: false});\\n    }\\n\\n    revert InvalidExtraArgsTag();\\n  }\\n\\n  /// @notice Always returns true to make sure this check can be performed on any chain.\\n  function isChainSupported(\\n    uint64\\n  ) external pure returns (bool supported) {\\n    return true;\\n  }\\n\\n  /// @notice Returns an empty array.\\n  function getSupportedTokens(\\n    uint64\\n  ) external pure returns (address[] memory tokens) {\\n    return new address[](0);\\n  }\\n\\n  /// @notice Returns 0 as the fee is not supported in this mock contract.\\n  function getFee(uint64, Client.EVM2AnyMessage memory) public view returns (uint256) {\\n    return s_mockFeeTokenAmount;\\n  }\\n\\n  /// @notice Sets the fees returned by getFee but is only checked when using native fee tokens\\n  function setFee(\\n    uint256 feeAmount\\n  ) external {\\n    s_mockFeeTokenAmount = feeAmount;\\n  }\\n\\n  /// @notice Always returns address(1234567890)\\n  function getOnRamp(\\n    uint64 /* destChainSelector */\\n  ) external pure returns (address onRampAddress) {\\n    return address(1234567890);\\n  }\\n\\n  /// @notice Always returns true\\n  function isOffRamp(uint64, /* sourceChainSelector */ address /* offRamp */ ) external pure returns (bool) {\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xb0fe53af73c4d6884f3f43a44bce17406ea7a68c39fb0b49e2c5d3593acd0d08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/call/CallWithExactGas.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This library contains various callWithExactGas functions. All of them are\\n/// safe from gas bomb attacks.\\n/// @dev There is code duplication in this library. This is done to not leave the assembly\\n/// the blocks.\\nlibrary CallWithExactGas {\\n  error NoContract();\\n  error NoGasForCallExactCheck();\\n  error NotEnoughGasForCall();\\n\\n  bytes4 internal constant NO_CONTRACT_SIG = 0x0c3b563c;\\n  bytes4 internal constant NO_GAS_FOR_CALL_EXACT_CHECK_SIG = 0xafa32a2c;\\n  bytes4 internal constant NOT_ENOUGH_GAS_FOR_CALL_SIG = 0x37c3be29;\\n\\n  /// @notice calls target address with exactly gasAmount gas and payload as calldata.\\n  /// Accounts for gasForCallExactCheck gas that will be used by this function. Will revert\\n  /// if the target is not a contact. Will revert when there is not enough gas to call the\\n  /// target with gasAmount gas.\\n  /// @dev Ignores the return data, which makes it immune to gas bomb attacks.\\n  /// @return success whether the call succeeded\\n  function _callWithExactGas(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck\\n  ) internal returns (bool success) {\\n    assembly {\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      // Note we do this check prior to measuring gas so gasForCallExactCheck (our \\\"cushion\\\")\\n      // doesn't need to account for it.\\n      if iszero(extcodesize(target)) {\\n        mstore(0x0, NO_CONTRACT_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      let g := gas()\\n      // Compute g -= gasForCallExactCheck and check for underflow\\n      // The gas actually passed to the callee is _min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas. gasForCallExactCheck ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, gasForCallExactCheck) {\\n        mstore(0x0, NO_GAS_FOR_CALL_EXACT_CHECK_SIG)\\n        revert(0x0, 0x4)\\n      }\\n      g := sub(g, gasForCallExactCheck)\\n      // if g - g//64 <= gasAmount, revert. We subtract g//64 because of EIP-150\\n      if iszero(gt(sub(g, div(g, 64)), gasLimit)) {\\n        mstore(0x0, NOT_ENOUGH_GAS_FOR_CALL_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n    }\\n    return success;\\n  }\\n\\n  /// @notice calls target address with exactly gasAmount gas and payload as calldata.\\n  /// Account for gasForCallExactCheck gas that will be used by this function. Will revert\\n  /// if the target is not a contact. Will revert when there is not enough gas to call the\\n  /// target with gasAmount gas.\\n  /// @dev Caps the return data length, which makes it immune to gas bomb attacks.\\n  /// @dev Return data cap logic borrowed from\\n  /// https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol.\\n  /// @return success whether the call succeeded\\n  /// @return retData the return data from the call, capped at maxReturnBytes bytes\\n  /// @return gasUsed the gas used by the external call. Does not include the overhead of this function.\\n  function _callWithExactGasSafeReturnData(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck,\\n    uint16 maxReturnBytes\\n  ) internal returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    // allocate retData memory ahead of time\\n    retData = new bytes(maxReturnBytes);\\n\\n    assembly {\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      // Note we do this check prior to measuring gas so gasForCallExactCheck (our \\\"cushion\\\")\\n      // doesn't need to account for it.\\n      if iszero(extcodesize(target)) {\\n        mstore(0x0, NO_CONTRACT_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      let g := gas()\\n      // Compute g -= gasForCallExactCheck and check for underflow\\n      // The gas actually passed to the callee is _min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas. gasForCallExactCheck ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, gasForCallExactCheck) {\\n        mstore(0x0, NO_GAS_FOR_CALL_EXACT_CHECK_SIG)\\n        revert(0x0, 0x4)\\n      }\\n      g := sub(g, gasForCallExactCheck)\\n      // if g - g//64 <= gasAmount, revert. We subtract g//64 because of EIP-150\\n      if iszero(gt(sub(g, div(g, 64)), gasLimit)) {\\n        mstore(0x0, NOT_ENOUGH_GAS_FOR_CALL_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      // We save the gas before the call so we can calculate how much gas the call used\\n      let gasBeforeCall := gas()\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n      gasUsed := sub(gasBeforeCall, gas())\\n\\n      // limit our copy to maxReturnBytes bytes\\n      let toCopy := returndatasize()\\n      if gt(toCopy, maxReturnBytes) {\\n        toCopy := maxReturnBytes\\n      }\\n      // Store the length of the copied bytes\\n      mstore(retData, toCopy)\\n      // copy the bytes from retData[0:_toCopy]\\n      returndatacopy(add(retData, 0x20), 0x0, toCopy)\\n    }\\n    return (success, retData, gasUsed);\\n  }\\n\\n  /// @notice Calls target address with exactly gasAmount gas and payload as calldata\\n  /// or reverts if at least gasLimit gas is not available.\\n  /// @dev Does not check if target is a contract. If it is not a contract, the low-level\\n  /// call will still be made and it will succeed.\\n  /// @dev Ignores the return data, which makes it immune to gas bomb attacks.\\n  /// @return success whether the call succeeded\\n  /// @return sufficientGas Whether there was enough gas to make the call\\n  function _callWithExactGasEvenIfTargetIsNoContract(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck\\n  ) internal returns (bool success, bool sufficientGas) {\\n    assembly {\\n      let g := gas()\\n      // Compute g -= CALL_WITH_EXACT_GAS_CUSHION and check for underflow. We\\n      // need the cushion since the logic following the above call to gas also\\n      // costs gas which we cannot account for exactly. So cushion is a\\n      // conservative upper bound for the cost of this logic.\\n      if iszero(lt(g, gasForCallExactCheck)) {\\n        g := sub(g, gasForCallExactCheck)\\n        // If g - g//64 <= gasAmount, we don't have enough gas. We subtract g//64 because of EIP-150.\\n        if gt(sub(g, div(g, 64)), gasLimit) {\\n          // Call and ignore success/return data. Note that we did not check\\n          // whether a contract actually exists at the target address.\\n          success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n          sufficientGas := true\\n        }\\n      }\\n    }\\n    return (success, sufficientGas);\\n  }\\n}\\n\",\"keccak256\":\"0xd54e61bcfaa2f85d2bdc0ad4021f41f78731556905caa87b1acfa4f53bde5522\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5f9ee31598e2250815033c2f4e1e7e747f917815378938505063df1d4ae603ec\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/token/ERC20/IBurnMintERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBurnMintERC20 is IERC20 {\\n  /// @notice Mints new tokens for a given address.\\n  /// @param account The address to mint the new tokens to.\\n  /// @param amount The number of tokens to be minted.\\n  /// @dev this function increases the total supply.\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from the sender.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbb8f9a00d41bbc516c691a4685c07c291b978fff98d133a50bb4773a6fc2b19f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/token/ERC677/BurnMintERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBurnMintERC20} from \\\"../ERC20/IBurnMintERC20.sol\\\";\\nimport {IERC677} from \\\"./IERC677.sol\\\";\\n\\nimport {ERC677} from \\\"./ERC677.sol\\\";\\nimport {OwnerIsCreator} from \\\"../../access/OwnerIsCreator.sol\\\";\\n\\nimport {ERC20Burnable} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {EnumerableSet} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC165} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice A basic ERC677 compatible token contract with burn and minting roles.\\n/// @dev The total supply can be limited during deployment.\\ncontract BurnMintERC677 is IBurnMintERC20, ERC677, IERC165, ERC20Burnable, OwnerIsCreator {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  error SenderNotMinter(address sender);\\n  error SenderNotBurner(address sender);\\n  error MaxSupplyExceeded(uint256 supplyAfterMint);\\n\\n  event MintAccessGranted(address indexed minter);\\n  event BurnAccessGranted(address indexed burner);\\n  event MintAccessRevoked(address indexed minter);\\n  event BurnAccessRevoked(address indexed burner);\\n\\n  // @dev the allowed minter addresses\\n  EnumerableSet.AddressSet internal s_minters;\\n  // @dev the allowed burner addresses\\n  EnumerableSet.AddressSet internal s_burners;\\n\\n  /// @dev The number of decimals for the token\\n  uint8 internal immutable i_decimals;\\n\\n  /// @dev The maximum supply of the token, 0 if unlimited\\n  uint256 internal immutable i_maxSupply;\\n\\n  constructor(string memory name, string memory symbol, uint8 decimals_, uint256 maxSupply_) ERC677(name, symbol) {\\n    i_decimals = decimals_;\\n    i_maxSupply = maxSupply_;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return\\n      interfaceId == type(IERC20).interfaceId ||\\n      interfaceId == type(IERC677).interfaceId ||\\n      interfaceId == type(IBurnMintERC20).interfaceId ||\\n      interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  // ================================================================\\n  // |                            ERC20                             |\\n  // ================================================================\\n\\n  /// @dev Returns the number of decimals used in its user representation.\\n  function decimals() public view virtual override returns (uint8) {\\n    return i_decimals;\\n  }\\n\\n  /// @dev Returns the max supply of the token, 0 if unlimited.\\n  function maxSupply() public view virtual returns (uint256) {\\n    return i_maxSupply;\\n  }\\n\\n  /// @dev Uses OZ ERC20 _transfer to disallow sending to address(0).\\n  /// @dev Disallows sending to address(this)\\n  function _transfer(address from, address to, uint256 amount) internal virtual override validAddress(to) {\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /// @dev Uses OZ ERC20 _approve to disallow approving for address(0).\\n  /// @dev Disallows approving for address(this)\\n  function _approve(address owner, address spender, uint256 amount) internal virtual override validAddress(spender) {\\n    super._approve(owner, spender, amount);\\n  }\\n\\n  /// @dev Exists to be backwards compatible with the older naming convention.\\n  function decreaseApproval(address spender, uint256 subtractedValue) external returns (bool success) {\\n    return decreaseAllowance(spender, subtractedValue);\\n  }\\n\\n  /// @dev Exists to be backwards compatible with the older naming convention.\\n  function increaseApproval(address spender, uint256 addedValue) external {\\n    increaseAllowance(spender, addedValue);\\n  }\\n\\n  /// @notice Check if recipient is valid (not this contract address).\\n  /// @param recipient the account we transfer/approve to.\\n  /// @dev Reverts with an empty revert to be compatible with the existing link token when\\n  /// the recipient is this contract address.\\n  modifier validAddress(address recipient) virtual {\\n    // solhint-disable-next-line reason-string, gas-custom-errors\\n    if (recipient == address(this)) revert();\\n    _;\\n  }\\n\\n  // ================================================================\\n  // |                      Burning & minting                       |\\n  // ================================================================\\n\\n  /// @inheritdoc ERC20Burnable\\n  /// @dev Uses OZ ERC20 _burn to disallow burning from address(0).\\n  /// @dev Decreases the total supply.\\n  function burn(uint256 amount) public override(IBurnMintERC20, ERC20Burnable) onlyBurner {\\n    super.burn(amount);\\n  }\\n\\n  /// @inheritdoc IBurnMintERC20\\n  /// @dev Alias for BurnFrom for compatibility with the older naming convention.\\n  /// @dev Uses burnFrom for all validation & logic.\\n  function burn(address account, uint256 amount) public virtual override {\\n    burnFrom(account, amount);\\n  }\\n\\n  /// @inheritdoc ERC20Burnable\\n  /// @dev Uses OZ ERC20 _burn to disallow burning from address(0).\\n  /// @dev Decreases the total supply.\\n  function burnFrom(address account, uint256 amount) public override(IBurnMintERC20, ERC20Burnable) onlyBurner {\\n    super.burnFrom(account, amount);\\n  }\\n\\n  /// @inheritdoc IBurnMintERC20\\n  /// @dev Uses OZ ERC20 _mint to disallow minting to address(0).\\n  /// @dev Disallows minting to address(this)\\n  /// @dev Increases the total supply.\\n  function mint(address account, uint256 amount) external override onlyMinter validAddress(account) {\\n    if (i_maxSupply != 0 && totalSupply() + amount > i_maxSupply) revert MaxSupplyExceeded(totalSupply() + amount);\\n\\n    _mint(account, amount);\\n  }\\n\\n  // ================================================================\\n  // |                            Roles                             |\\n  // ================================================================\\n\\n  /// @notice grants both mint and burn roles to `burnAndMinter`.\\n  /// @dev calls public functions so this function does not require\\n  /// access controls. This is handled in the inner functions.\\n  function grantMintAndBurnRoles(address burnAndMinter) external {\\n    grantMintRole(burnAndMinter);\\n    grantBurnRole(burnAndMinter);\\n  }\\n\\n  /// @notice Grants mint role to the given address.\\n  /// @dev only the owner can call this function.\\n  function grantMintRole(address minter) public onlyOwner {\\n    if (s_minters.add(minter)) {\\n      emit MintAccessGranted(minter);\\n    }\\n  }\\n\\n  /// @notice Grants burn role to the given address.\\n  /// @dev only the owner can call this function.\\n  function grantBurnRole(address burner) public onlyOwner {\\n    if (s_burners.add(burner)) {\\n      emit BurnAccessGranted(burner);\\n    }\\n  }\\n\\n  /// @notice Revokes mint role for the given address.\\n  /// @dev only the owner can call this function.\\n  function revokeMintRole(address minter) public onlyOwner {\\n    if (s_minters.remove(minter)) {\\n      emit MintAccessRevoked(minter);\\n    }\\n  }\\n\\n  /// @notice Revokes burn role from the given address.\\n  /// @dev only the owner can call this function\\n  function revokeBurnRole(address burner) public onlyOwner {\\n    if (s_burners.remove(burner)) {\\n      emit BurnAccessRevoked(burner);\\n    }\\n  }\\n\\n  /// @notice Returns all permissioned minters\\n  function getMinters() public view returns (address[] memory) {\\n    return s_minters.values();\\n  }\\n\\n  /// @notice Returns all permissioned burners\\n  function getBurners() public view returns (address[] memory) {\\n    return s_burners.values();\\n  }\\n\\n  // ================================================================\\n  // |                            Access                            |\\n  // ================================================================\\n\\n  /// @notice Checks whether a given address is a minter for this token.\\n  /// @return true if the address is allowed to mint.\\n  function isMinter(address minter) public view returns (bool) {\\n    return s_minters.contains(minter);\\n  }\\n\\n  /// @notice Checks whether a given address is a burner for this token.\\n  /// @return true if the address is allowed to burn.\\n  function isBurner(address burner) public view returns (bool) {\\n    return s_burners.contains(burner);\\n  }\\n\\n  /// @notice Checks whether the msg.sender is a permissioned minter for this token\\n  /// @dev Reverts with a SenderNotMinter if the check fails\\n  modifier onlyMinter() {\\n    if (!isMinter(msg.sender)) revert SenderNotMinter(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Checks whether the msg.sender is a permissioned burner for this token\\n  /// @dev Reverts with a SenderNotBurner if the check fails\\n  modifier onlyBurner() {\\n    if (!isBurner(msg.sender)) revert SenderNotBurner(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcb01797efae4a0ebea11c682ed6fea70d46da4c18520f159dbab5b71f1ed8583\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/token/ERC677/ERC677.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IERC677} from \\\"./IERC677.sol\\\";\\nimport {IERC677Receiver} from \\\"../../interfaces/IERC677Receiver.sol\\\";\\n\\nimport {ERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC677 is IERC677, ERC20 {\\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n  /// @inheritdoc IERC677\\n  function transferAndCall(address to, uint256 amount, bytes memory data) public returns (bool success) {\\n    super.transfer(to, amount);\\n    emit Transfer(msg.sender, to, amount, data);\\n    if (to.code.length > 0) {\\n      IERC677Receiver(to).onTokenTransfer(msg.sender, amount, data);\\n    }\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x44334c593c2c44f4035e07de4e250d3d470b1ee5cf4a64cdc4c34232604cfda4\",\"license\":\"UNLICENSED\"},\"@chainlink/contracts/src/v0.8/shared/token/ERC677/IERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677 {\\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n  /// @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n  /// @param to The address which you want to transfer to\\n  /// @param amount The amount of tokens to be transferred\\n  /// @param data bytes Additional data with no specified format, sent in call to `to`\\n  /// @return true unless throwing\\n  function transferAndCall(address to, uint256 amount, bytes memory data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x771321adbdab6bec7d27bcd8a46dfea813f1c97d97a7a671fe35cd87744daee4\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * NOTE: Does not update the allowance if the current allowance\\n   * is the maximum `uint256`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` and `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``from``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = allowance(owner, spender);\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   */\\n  function _transfer(address from, address to, uint256 amount) internal virtual {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, amount);\\n\\n    uint256 fromBalance = _balances[from];\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n      _balances[from] = fromBalance - amount;\\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n      // decrementing then incrementing.\\n      _balances[to] += amount;\\n    }\\n\\n    emit Transfer(from, to, amount);\\n\\n    _afterTokenTransfer(from, to, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    unchecked {\\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n      _balances[account] += amount;\\n    }\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\\n      _totalSupply -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n   *\\n   * Does not update the allowance amount in case of infinite allowance.\\n   * Revert if not enough allowance is available.\\n   *\\n   * Might emit an {Approval} event.\\n   */\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb887157b76f9985dc9c622eb97aaa83974045481892934fe51847d7aaa327c4b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n  /**\\n   * @dev Destroys `amount` tokens from the caller.\\n   *\\n   * See {ERC20-_burn}.\\n   */\\n  function burn(uint256 amount) public virtual {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n   * allowance.\\n   *\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\n   * `amount`.\\n   */\\n  function burnFrom(address account, uint256 amount) public virtual {\\n    _spendAllowance(account, _msgSender(), amount);\\n    _burn(account, amount);\\n  }\\n}\",\"keccak256\":\"0xe59a2a9091d311e24bdf02c955897af112194b40ce3ed0027d6ec0a4a6cb047a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x057a2ba732c7946ef55d676e5a7aa0119443cf67c75f404838065a31ddd4877c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9ec0d82ee53d4137be44f1f38f9a82d0d3a2027b3b8b226a5a90e4ee76e926d6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CCIPLocalSimulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {WETH9} from \\\"./helper/WETH9.sol\\\";\\r\\nimport {LinkToken} from \\\"./helper/LinkToken.sol\\\";\\r\\nimport {BurnMintERC677Helper} from \\\"./helper/BurnMintERC677Helper.sol\\\";\\r\\nimport {MockCCIPRouter} from \\\"@chainlink/contracts-ccip/contracts/test/mocks/MockRouter.sol\\\";\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/contracts/interfaces/IRouterClient.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IOwner} from \\\"@chainlink/contracts-ccip/contracts/interfaces/IOwner.sol\\\";\\r\\nimport {IGetCCIPAdmin} from \\\"@chainlink/contracts-ccip/contracts/interfaces/IGetCCIPAdmin.sol\\\";\\r\\nimport {AccessControl} from\\\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\n/// @title CCIPLocalSimulator\\r\\n/// @notice This contract simulates local CCIP (Cross-Chain Interoperability Protocol) operations for testing and development purposes.\\r\\n/// @dev This contract includes methods to manage supported tokens and configurations for local simulations.\\r\\ncontract CCIPLocalSimulator {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice The unique CCIP Chain Selector constant\\r\\n    uint64 constant CHAIN_SELECTOR = 16015286601757825753;\\r\\n\\r\\n    /// @notice The wrapped native token instance\\r\\n    WETH9 internal immutable i_wrappedNative;\\r\\n\\r\\n    /// @notice The LINK token instance\\r\\n    LinkToken internal immutable i_linkToken;\\r\\n\\r\\n    /// @notice The BurnMintERC677Helper instance for CCIP-BnM token\\r\\n    BurnMintERC677Helper internal immutable i_ccipBnM;\\r\\n\\r\\n    /// @notice The BurnMintERC677Helper instance for CCIP-LnM token\\r\\n    BurnMintERC677Helper internal immutable i_ccipLnM;\\r\\n\\r\\n    /// @notice The mock CCIP router instance\\r\\n    MockCCIPRouter internal immutable i_mockRouter;\\r\\n\\r\\n    /// @notice The list of supported token addresses\\r\\n    address[] internal s_supportedTokens;\\r\\n\\r\\n    error CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\r\\n    error CCIPLocalSimulator__RequiredRoleNotFound(address account, bytes32 role, address token);\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor to initialize the contract and pre-deployed token instances\\r\\n     */\\r\\n    constructor() {\\r\\n        i_wrappedNative = new WETH9();\\r\\n        i_linkToken = new LinkToken();\\r\\n        i_ccipBnM = new BurnMintERC677Helper(\\\"CCIP-BnM\\\", \\\"CCIP-BnM\\\");\\r\\n        i_ccipLnM = new BurnMintERC677Helper(\\\"CCIP-LnM\\\", \\\"CCIP-LnM\\\");\\r\\n        i_mockRouter = new MockCCIPRouter();\\r\\n\\r\\n        s_supportedTokens.push(address(i_ccipBnM));\\r\\n        s_supportedTokens.push(address(i_ccipLnM));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\r\\n     *         Reverts if token does not implement owner() function.\\r\\n     *         Reverts if the caller is not the token owner.\\r\\n     *\\r\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\r\\n     */\\r\\n    function supportNewTokenViaOwner(address tokenAddress) external {\\r\\n        if (msg.sender != IOwner(tokenAddress).owner()) {\\r\\n            revert CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\r\\n        }\\r\\n        s_supportedTokens.push(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\r\\n     *         Reverts if token does not implement getCCIPAdmin() function.\\r\\n     *         Reverts if the caller is not the token CCIPAdmin.\\r\\n     *\\r\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\r\\n     */\\r\\n    function supportNewTokenViaGetCCIPAdmin(address tokenAddress) external {\\r\\n        if (msg.sender != IGetCCIPAdmin(tokenAddress).getCCIPAdmin()) {\\r\\n            revert CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\r\\n        }\\r\\n        s_supportedTokens.push(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\r\\n     *         The caller must have the DEFAULT_ADMIN_ROLE as defined by the contract itself.\\r\\n     *         Reverts if the caller is not the admin of the token using OZ's AccessControl DEFAULT_ADMIN_ROLE.\\r\\n     *\\r\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\r\\n     */\\r\\n    function supportNewTokenViaAccessControlDefaultAdmin(address tokenAddress) external {\\r\\n        bytes32 defaultAdminRole = AccessControl(tokenAddress).DEFAULT_ADMIN_ROLE();\\r\\n        if (!AccessControl(tokenAddress).hasRole(defaultAdminRole, msg.sender)) {\\r\\n            revert CCIPLocalSimulator__RequiredRoleNotFound(msg.sender, defaultAdminRole, tokenAddress);\\r\\n        }\\r\\n        s_supportedTokens.push(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether the provided `chainSelector` is supported by the simulator.\\r\\n     *\\r\\n     * @param chainSelector - The unique CCIP Chain Selector.\\r\\n     *\\r\\n     * @return supported - Returns true if `chainSelector` is supported by the simulator.\\r\\n     */\\r\\n    function isChainSupported(uint64 chainSelector) public pure returns (bool supported) {\\r\\n        supported = chainSelector == CHAIN_SELECTOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets a list of token addresses that are supported for cross-chain transfers by the simulator.\\r\\n     *\\r\\n     * @param chainSelector - The unique CCIP Chain Selector.\\r\\n     *\\r\\n     * @return tokens - Returns a list of token addresses that are supported for cross-chain transfers by the simulator.\\r\\n     */\\r\\n    function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens) {\\r\\n        if (!isChainSupported(chainSelector)) {\\r\\n            return new address[](0);\\r\\n        }\\r\\n\\r\\n        tokens = s_supportedTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Requests LINK tokens from the faucet. The provided amount of tokens are transferred to provided destination address.\\r\\n     *\\r\\n     * @param to - The address to which LINK tokens are to be sent.\\r\\n     * @param amount - The amount of LINK tokens to send.\\r\\n     *\\r\\n     * @return success - Returns `true` if the transfer of tokens was successful, otherwise `false`.\\r\\n     */\\r\\n    function requestLinkFromFaucet(address to, uint256 amount) external returns (bool success) {\\r\\n        success = i_linkToken.transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns configuration details for pre-deployed contracts and services needed for local CCIP simulations.\\r\\n     *\\r\\n     * @return chainSelector_ - The unique CCIP Chain Selector.\\r\\n     * @return sourceRouter_  - The source chain Router contract.\\r\\n     * @return destinationRouter_ - The destination chain Router contract.\\r\\n     * @return wrappedNative_ - The wrapped native token which can be used for CCIP fees.\\r\\n     * @return linkToken_ - The LINK token.\\r\\n     * @return ccipBnM_ - The ccipBnM token.\\r\\n     * @return ccipLnM_ - The ccipLnM token.\\r\\n     */\\r\\n    function configuration()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint64 chainSelector_,\\r\\n            IRouterClient sourceRouter_,\\r\\n            IRouterClient destinationRouter_,\\r\\n            WETH9 wrappedNative_,\\r\\n            LinkToken linkToken_,\\r\\n            BurnMintERC677Helper ccipBnM_,\\r\\n            BurnMintERC677Helper ccipLnM_\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            CHAIN_SELECTOR,\\r\\n            IRouterClient(address(i_mockRouter)),\\r\\n            IRouterClient(address(i_mockRouter)),\\r\\n            i_wrappedNative,\\r\\n            i_linkToken,\\r\\n            i_ccipBnM,\\r\\n            i_ccipLnM\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc1ddb73e04c9211b2c838561ac5be01e5ad430b1cebfee418d6154513cd0f45f\",\"license\":\"MIT\"},\"contracts/helper/BurnMintERC677Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {BurnMintERC677} from \\\"@chainlink/contracts/src/v0.8/shared/token/ERC677/BurnMintERC677.sol\\\";\\n\\n/// @title BurnMintERC677Helper\\n/// @notice This contract extends the functionality of the BurnMintERC677 token contract to include a `drip` function that mints one full token to a specified address.\\n/// @dev Inherits from the BurnMintERC677 contract and sets the token name, symbol, decimals, and initial supply in the constructor.\\ncontract BurnMintERC677Helper is BurnMintERC677 {\\n    /**\\n     * @notice Constructor to initialize the BurnMintERC677Helper contract with a name and symbol.\\n     * @dev Calls the parent constructor of BurnMintERC677 with fixed decimals (18) and initial supply (0).\\n     * @param name - The name of the token.\\n     * @param symbol - The symbol of the token.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol\\n    ) BurnMintERC677(name, symbol, 18, 0) {}\\n\\n    /**\\n     * @notice Mints one full token (1e18) to the specified address.\\n     * @dev Calls the internal `_mint` function from the BurnMintERC677 contract.\\n     * @param to - The address to receive the minted token.\\n     */\\n    function drip(address to) external {\\n        _mint(to, 1e18);\\n    }\\n}\\n\",\"keccak256\":\"0x929ded8fd3523455344822f4c2c02390360e8430c84b6aa7a5ce739e03c55546\",\"license\":\"MIT\"},\"contracts/helper/LinkToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC677} from \\\"@chainlink/contracts/src/v0.8/shared/token/ERC677/ERC677.sol\\\";\\n\\n/// @title LinkToken\\n/// @notice This contract implements the ChainLink Token (LINK) using the ERC677 standard.\\n/// @dev Inherits from the ERC677 token contract and initializes with a fixed total supply and standard token details.\\ncontract LinkToken is ERC677 {\\n    /// @notice The total supply of LINK tokens.\\n    uint private constant TOTAL_SUPPLY = 10 ** 27;\\n\\n    /// @notice The name of the LINK token.\\n    string private constant NAME = \\\"ChainLink Token\\\";\\n\\n    /// @notice The symbol of the LINK token.\\n    string private constant SYMBOL = \\\"LINK\\\";\\n\\n    /**\\n     * @notice Constructor to initialize the LinkToken contract with a fixed total supply, name, and symbol.\\n     * @dev Calls the ERC677 constructor with the name and symbol, and then mints the total supply to the contract deployer.\\n     */\\n    constructor() ERC677(NAME, SYMBOL) {\\n        _onCreate();\\n    }\\n\\n    /**\\n     * @notice Hook that is called when this contract is created.\\n     * @dev Useful to override constructor behaviour in child contracts (e.g., LINK bridge tokens).\\n     *      The default implementation mints 10**27 tokens to the contract deployer.\\n     */\\n    function _onCreate() internal virtual {\\n        _mint(msg.sender, TOTAL_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0xf09e79ee3a7c4196067a84535bc201d84486bb05adb78f9a20b43fdf58c22834\",\"license\":\"MIT\"},\"contracts/helper/WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ncontract WETH9 {\\n    string public name = \\\"Wrapped Ether\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    receive() external payable {\\n        _deposit();\\n    }\\n\\n    function _deposit() internal {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function deposit() external payable {\\n        _deposit();\\n    }\\n\\n    function withdraw(uint256 wad) external {\\n        require(balanceOf[msg.sender] >= wad);\\n        balanceOf[msg.sender] -= wad;\\n        payable(msg.sender).transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool) {\\n        require(balanceOf[src] >= wad);\\n\\n        if (\\n            src != msg.sender && allowance[src][msg.sender] != type(uint128).max\\n        ) {\\n            require(allowance[src][msg.sender] >= wad);\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e17b93f1334a4f7447c8a1a56a3def3c45410dac0b5f30c0c50116fb9e5dd00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639098502b1161005b5780639098502b146100f2578063a48a90581461010e578063c250b5f31461013e578063fbca3b741461015a5761007d565b80633eaa885914610082578063657b9a4e1461009e5780636c70bee9146100ce575b600080fd5b61009c600480360381019061009791906108aa565b61018a565b005b6100b860048036038101906100b3919061090d565b6102c3565b6040516100c59190610968565b60405180910390f35b6100d661036b565b6040516100e99796959493929190610a7a565b60405180910390f35b61010c600480360381019061010791906108aa565b61045c565b005b61012860048036038101906101239190610b15565b6105f7565b6040516101359190610968565b60405180910390f35b610158600480360381019061015391906108aa565b61061f565b005b610174600480360381019061016f9190610b15565b610758565b6040516101819190610c00565b60405180910390f35b8073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610c37565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461025d576040517f92c4665e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610320929190610c82565b6020604051808303816000875af115801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190610cd7565b905092915050565b600080600080600080600067de41ba4fc9d91ad97f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000965096509650965096509650965090919293949596565b60008173ffffffffffffffffffffffffffffffffffffffff1663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610d3a565b90508173ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b815260040161050a929190610d76565b602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610cd7565b610590573381836040517f7318d92000000000000000000000000000000000000000000000000000000000815260040161058793929190610d9f565b60405180910390fd5b6000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600067de41ba4fc9d91ad967ffffffffffffffff168267ffffffffffffffff16149050919050565b8073ffffffffffffffffffffffffffffffffffffffff16638fd6a6ac6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610c37565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f2576040517f92c4665e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060610763826105f7565b6107b857600067ffffffffffffffff81111561078257610781610dd6565b5b6040519080825280602002602001820160405280156107b05781602001602082028036833780820191505090505b509050610842565b600080548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107f0575b505050505090505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108778261084c565b9050919050565b6108878161086c565b811461089257600080fd5b50565b6000813590506108a48161087e565b92915050565b6000602082840312156108c0576108bf610847565b5b60006108ce84828501610895565b91505092915050565b6000819050919050565b6108ea816108d7565b81146108f557600080fd5b50565b600081359050610907816108e1565b92915050565b6000806040838503121561092457610923610847565b5b600061093285828601610895565b9250506020610943858286016108f8565b9150509250929050565b60008115159050919050565b6109628161094d565b82525050565b600060208201905061097d6000830184610959565b92915050565b600067ffffffffffffffff82169050919050565b6109a081610983565b82525050565b6000819050919050565b60006109cb6109c66109c18461084c565b6109a6565b61084c565b9050919050565b60006109dd826109b0565b9050919050565b60006109ef826109d2565b9050919050565b6109ff816109e4565b82525050565b6000610a10826109b0565b9050919050565b6000610a2282610a05565b9050919050565b610a3281610a17565b82525050565b6000610a43826109d2565b9050919050565b610a5381610a38565b82525050565b6000610a64826109d2565b9050919050565b610a7481610a59565b82525050565b600060e082019050610a8f600083018a610997565b610a9c60208301896109f6565b610aa960408301886109f6565b610ab66060830187610a29565b610ac36080830186610a4a565b610ad060a0830185610a6b565b610add60c0830184610a6b565b98975050505050505050565b610af281610983565b8114610afd57600080fd5b50565b600081359050610b0f81610ae9565b92915050565b600060208284031215610b2b57610b2a610847565b5b6000610b3984828501610b00565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b778161086c565b82525050565b6000610b898383610b6e565b60208301905092915050565b6000602082019050919050565b6000610bad82610b42565b610bb78185610b4d565b9350610bc283610b5e565b8060005b83811015610bf3578151610bda8882610b7d565b9750610be583610b95565b925050600181019050610bc6565b5085935050505092915050565b60006020820190508181036000830152610c1a8184610ba2565b905092915050565b600081519050610c318161087e565b92915050565b600060208284031215610c4d57610c4c610847565b5b6000610c5b84828501610c22565b91505092915050565b610c6d8161086c565b82525050565b610c7c816108d7565b82525050565b6000604082019050610c976000830185610c64565b610ca46020830184610c73565b9392505050565b610cb48161094d565b8114610cbf57600080fd5b50565b600081519050610cd181610cab565b92915050565b600060208284031215610ced57610cec610847565b5b6000610cfb84828501610cc2565b91505092915050565b6000819050919050565b610d1781610d04565b8114610d2257600080fd5b50565b600081519050610d3481610d0e565b92915050565b600060208284031215610d5057610d4f610847565b5b6000610d5e84828501610d25565b91505092915050565b610d7081610d04565b82525050565b6000604082019050610d8b6000830185610d67565b610d986020830184610c64565b9392505050565b6000606082019050610db46000830186610c64565b610dc16020830185610d67565b610dce6040830184610c64565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220c4e39c129a6921d607c91445fcdf357c3ca188aa6067bd93c5f51034bb88cb2264736f6c634300081b0033",
  "devdoc": {
    "details": "This contract includes methods to manage supported tokens and configurations for local simulations.",
    "kind": "dev",
    "methods": {
      "configuration()": {
        "returns": {
          "ccipBnM_": "- The ccipBnM token.",
          "ccipLnM_": "- The ccipLnM token.",
          "chainSelector_": "- The unique CCIP Chain Selector.",
          "destinationRouter_": "- The destination chain Router contract.",
          "linkToken_": "- The LINK token.",
          "sourceRouter_": " - The source chain Router contract.",
          "wrappedNative_": "- The wrapped native token which can be used for CCIP fees."
        }
      },
      "getSupportedTokens(uint64)": {
        "params": {
          "chainSelector": "- The unique CCIP Chain Selector."
        },
        "returns": {
          "tokens": "- Returns a list of token addresses that are supported for cross-chain transfers by the simulator."
        }
      },
      "isChainSupported(uint64)": {
        "params": {
          "chainSelector": "- The unique CCIP Chain Selector."
        },
        "returns": {
          "supported": "- Returns true if `chainSelector` is supported by the simulator."
        }
      },
      "requestLinkFromFaucet(address,uint256)": {
        "params": {
          "amount": "- The amount of LINK tokens to send.",
          "to": "- The address to which LINK tokens are to be sent."
        },
        "returns": {
          "success": "- Returns `true` if the transfer of tokens was successful, otherwise `false`."
        }
      },
      "supportNewTokenViaAccessControlDefaultAdmin(address)": {
        "params": {
          "tokenAddress": "- The address of the token to add to the list of supported tokens."
        }
      },
      "supportNewTokenViaGetCCIPAdmin(address)": {
        "params": {
          "tokenAddress": "- The address of the token to add to the list of supported tokens."
        }
      },
      "supportNewTokenViaOwner(address)": {
        "params": {
          "tokenAddress": "- The address of the token to add to the list of supported tokens."
        }
      }
    },
    "title": "CCIPLocalSimulator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configuration()": {
        "notice": "Returns configuration details for pre-deployed contracts and services needed for local CCIP simulations."
      },
      "constructor": {
        "notice": "Constructor to initialize the contract and pre-deployed token instances"
      },
      "getSupportedTokens(uint64)": {
        "notice": "Gets a list of token addresses that are supported for cross-chain transfers by the simulator."
      },
      "isChainSupported(uint64)": {
        "notice": "Checks whether the provided `chainSelector` is supported by the simulator."
      },
      "requestLinkFromFaucet(address,uint256)": {
        "notice": "Requests LINK tokens from the faucet. The provided amount of tokens are transferred to provided destination address."
      },
      "supportNewTokenViaAccessControlDefaultAdmin(address)": {
        "notice": "Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         The caller must have the DEFAULT_ADMIN_ROLE as defined by the contract itself.         Reverts if the caller is not the admin of the token using OZ's AccessControl DEFAULT_ADMIN_ROLE."
      },
      "supportNewTokenViaGetCCIPAdmin(address)": {
        "notice": "Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         Reverts if token does not implement getCCIPAdmin() function.         Reverts if the caller is not the token CCIPAdmin."
      },
      "supportNewTokenViaOwner(address)": {
        "notice": "Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.         Reverts if token does not implement owner() function.         Reverts if the caller is not the token owner."
      }
    },
    "notice": "This contract simulates local CCIP (Cross-Chain Interoperability Protocol) operations for testing and development purposes.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12456,
        "contract": "contracts/CCIPLocalSimulator.sol:CCIPLocalSimulator",
        "label": "s_supportedTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}